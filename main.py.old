import pygame
import sys
from constants import * 
from player import Player
from asteroid import Asteroid
from asteroidfield import AsteroidField
from shot import Shot

class GameState:
    PLAYING = "playing"
    GAME_OVER = "game_over"

def reset_game(player, asteroidfield, shots, asteroids):
    """Reset the game state - player position and clear asteroids/shots"""
    # Reset player position and velocity
    player.position = pygame.Vector2(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2)
    player.velocity = pygame.Vector2(0, 0)
    player.rotation = 0
    player.make_invulnerable(2.0)  # 2 seconds of invulnerability
    
    # Clear all asteroids and shots
    for asteroid in asteroids:
        asteroid.kill()
    for shot in shots:
        shot.kill()
    
    # Reset asteroid field
    asteroidfield.__init__()

def draw_lives(screen, lives, font):
    """Draw the lives counter in the top left corner"""
    lives_text = font.render(f"Lives: {lives}", True, "white")
    screen.blit(lives_text, (20, 20))

def draw_game_over(screen, font):
    """Draw the game over screen"""
    game_over_text = font.render("GAME OVER", True, "white")
    restart_text = font.render("Press SPACE to restart", True, "white")
    
    # Center the text on screen
    game_over_rect = game_over_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 - 50))
    restart_rect = restart_text.get_rect(center=(SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 50))
    
    screen.blit(game_over_text, game_over_rect)
    screen.blit(restart_text, restart_rect)

def main():
    print("Starting Asteroids!")
    print(f"Screen width: {SCREEN_WIDTH}")
    print(f"Screen height: {SCREEN_HEIGHT}")
    
    # initialize pygame
    pygame.init()
    
    # Initialize font
    pygame.font.init()
    font = pygame.font.Font(None, 74)  # Large font for game over
    ui_font = pygame.font.Font(None, 36)  # Smaller font for UI

    # create the game window
    GAMESCREEN = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("Asteroids")

    # create sprite groups
    updatable = pygame.sprite.Group()
    drawable = pygame.sprite.Group()

    shots = pygame.sprite.Group()
    asteroids = pygame.sprite.Group()

    # set the sprite groups to the class containers
    Player.containers = updatable, drawable
    Shot.containers = updatable, drawable, shots
    
    Asteroid.containers = updatable, drawable, asteroids
    AsteroidField.containers = updatable

    # create the game objects
    player = Player(x = SCREEN_WIDTH / 2, y = SCREEN_HEIGHT / 2)
    asteroidfield = AsteroidField()
    clock = pygame.time.Clock()
    
    # Game state variables
    game_state = GameState.PLAYING
    lives = PLAYER_LIVES

    # main game loop
    RUNGAME = True
    while RUNGAME:
        # end loop when window closed or escape key pressed
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                RUNGAME = False
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    RUNGAME = False
                elif event.key == pygame.K_SPACE and game_state == GameState.GAME_OVER:
                    # Restart the game
                    game_state = GameState.PLAYING
                    lives = PLAYER_LIVES
                    reset_game(player, asteroidfield, shots, asteroids)

        dt = clock.tick(60) / 1000  # Amount of seconds between each loop.
        
        # clear the screen
        GAMESCREEN.fill('black')
        
        if game_state == GameState.PLAYING:
            # update the player
            updatable.update(dt)
            
            # Check for player-asteroid collision
            for asteroid in asteroids:
                if player.is_vulnerable() and player.collision(asteroid):
                    lives -= 1
                    if lives <= 0:
                        game_state = GameState.GAME_OVER
                    else:
                        # Reset game but keep lives
                        reset_game(player, asteroidfield, shots, asteroids)
                    break
            
            # Check for shot-asteroid collision
            for shot in shots:
                for asteroid in asteroids:
                    if shot.collision(asteroid):
                        shot.kill()
                        asteroid.split()
                        break 

            # render the sprites
            for sprite in drawable: 
                sprite.draw(GAMESCREEN)
            
            # Draw UI elements
            draw_lives(GAMESCREEN, lives, ui_font)
            
        elif game_state == GameState.GAME_OVER:
            # Draw game over screen
            draw_game_over(GAMESCREEN, font)

        # 'flip' the display
        pygame.display.flip()


if __name__ == "__main__":
    main()
